HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);
    system("cls");

        cout << "Exam's Starting, Goodluck..." << endl;
        sleep(1.5);
        system("cls");

        // Questions & Answers
        SetConsoleTextAttribute(h,1);
        cout << "\n                             ==================================================================================================================================================\n";
        cout << "\n\t\t\t\tDIRECTIONS: PLEASE READ EACH QUESTION CAREFULLY AND THINK BEFORE YOU ANSWER. MAKE SURE TO FOLLOW ALL INSTRUCTIONS GIVEN. ALL ANSWERS MUST BE \n\t\t\t\t    WRITTEN IN CAPITAL LETTERS ONLY. FAILURE TO DO SO MAY RESULT IN YOUR ANSWER BEING MARKED INCORRECT. TAKE YOUR TIME AND DO YOUR BEST!\n" << endl;
        cout << "                             ==================================================================================================================================================\n\n";
        SetConsoleTextAttribute(h,15);
        const int NUM_QUESTIONS = 25;
        string questions[NUM_QUESTIONS] = {
		"\t\t\t\t\t\t1. The empty set is a subset of every set.'\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t2. The number 1 is a prime number.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t3. If set A is a subset of B and B is a subset of C, then A is a subset of C.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t4.In logic, the statement p AND NOT p is always true.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t5. A relation that is both symmetric and transitive is always reflexive.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t6. The power set of a set with n elements contains 2 raised to the n elements.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t7. A tautology is a statement that is always false.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t8. A bipartite graph can contain a cycle with an odd number of vertices.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t9. An injective function is the same as a one-to-one function.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t10. The set of all even integers is countably infinite.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t11. A graph with n vertices must have exactly n minus 1 edges to be a tree.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t12. The contrapositive of a conditional statement is logically equivalent to the original statement.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t13. In set theory, the union of sets A and B means their intersection.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t14. In an undirected graph, the degree of a vertex is the number of edges connected to it.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t15. The sum of the degrees of all vertices in any undirected graph is always an even number.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t16. A function can assign more than one output to a single input.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t17. The pigeonhole principle says that if you put more items than containers, at least one container will hold more than one item.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t18. Every reflexive relation is also symmetric.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t19. In a directed graph, every edge has a specific direction.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t20. An equivalence relation is one that is reflexive, symmetric, and transitive.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t21. The logical implication if p then q is only false when p is true and q is false\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t22. An infinite set cannot be matched one-to-one with the natural numbers.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t23. A Hamiltonian circuit visits each vertex exactly once and returns to the starting point.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE”",
		"\t\t\t\t\t\t24.A truth table with n variables has 2 to the power of n rows.\n\n\t\t\t\t\t\t\tA. TRUE\n\t\t\t\t\t\t\tB. FALSE",
		"\t\t\t\t\t\t25. The Cartesian product of sets A and B is always equal to the Cartesian product of B and A.\n\n\t\t\t\t\t\t\tA.  TRUE\n\t\t\t\t\t\t\tB. FALSE",
				};
        char correctAnswers[NUM_QUESTIONS] = {'A', 'B', 'A', 'B', 'B', 'A' ,'B' ,'B', 'A', 'A', 'A', 'A', 'B', 'A' ,'A', 'B', 'A', 'B' ,'A', 'A', 'A' ,'B', 'A', 'A', 'B'};
        char userAnswers[NUM_QUESTIONS];

        // Ask Questions and Store Answers
        for (int i = 0; i < NUM_QUESTIONS; i++) {
            cout << questions[i] << "\n\n\t\t\t\t\t\tAnswer: ";
            cin >> userAnswers[i];
            cout << "\n";
        }

        // Review and Edit Answers


        char reviewChoice;
        int qNum;
        while (true) {

            cout << "\t\t\t\tWould you like to change an answer? (Y = Yes || N = No): ";
            cin >> reviewChoice;
            if (reviewChoice == 'N' || reviewChoice == 'n') {
                break;
            } else if(reviewChoice == 'Y' || reviewChoice == 'y'){
            cout << "\t\t\t\tEnter the question number to edit (1-" << NUM_QUESTIONS << "): ";
            cin >> qNum;

            if (qNum >= 1 && qNum <= NUM_QUESTIONS) {
                cout << "\n" << questions[qNum - 1] << "\n\n\t\t\t\t\t\tNew Answer: ";
                cin >> userAnswers[qNum - 1];
            } else {
                cout << "\t\t\t\tInvalid question number! Try again.\n";
            }
        }
        else{
        	cout << "\t\t\t\tInvalid choices!! Y = Yes || N = No" << endl;
		}
        }

        // Calculate Score
        for (int i = 0; i < NUM_QUESTIONS; i++) {
            if (toupper(userAnswers[i]) == correctAnswers[i]) {
                discrete_score++;
            }
        }

        system("cls");
        cout << "You completed the Discrete Mathematics exam\n";
        cout << "Final Score: " << discrete_score << "/" << NUM_QUESTIONS << endl;
        cout << "Please wait...";
        sleep(3);
        discrete_taken = true;
        system("cls");
        exitprog = false;
        userpage();
